#!/usr/bin/env node

import {
  writeFileSync,
  renameSync,
  existsSync,
  readFileSync,
  readdirSync,
} from "fs";
import { readdir } from "fs/promises";
import { join, dirname, extname } from "path";
import { fileURLToPath } from "url";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const API_DOCS_PATH = join(__dirname, "..", "src", "docs", "api");
const OUTPUT_PATH = join(
  __dirname,
  "..",
  "src",
  "docs",
  ".vitepress",
  "sidebar",
  "api.mts",
);

function fileToDisplayName(filename) {
  return filename.replace(".md", "");
}

function removeBreadcrumbs(directory) {
  const items = readdirSync(directory, { withFileTypes: true });

  for (const item of items) {
    const fullPath = join(directory, item.name);

    if (item.isDirectory()) {
      removeBreadcrumbs(fullPath);
    } else if (item.isFile() && extname(item.name) === ".md") {
      let content = readFileSync(fullPath, "utf-8");

      content = content.replace(/^\[.*?\]\(.*?README\.md\)\n\n\*\*\*\n\n/m, "");

      writeFileSync(fullPath, content, "utf-8");
    }
  }
}

async function generateCategoryItems(category, displayName) {
  const categoryPath = join(API_DOCS_PATH, category);

  try {
    const files = await readdir(categoryPath);
    const mdFiles = files.filter((file) => file.endsWith(".md"));

    return {
      text: displayName,
      collapsed: true,
      items: mdFiles
        .sort((a, b) => a.localeCompare(b))
        .map((file) => ({
          text: fileToDisplayName(file),
          link: `/api/${category}/${file.replace(".md", "")}`,
        })),
    };
  } catch (error) {
    console.warn(
      `Warning: Could not read directory ${category}:`,
      error.message,
    );
    return null;
  }
}

async function generateApiSidebar() {
  console.log("🔍 Analyzing API documentation structure...");

  const readmePath = join(API_DOCS_PATH, "README.md");
  const indexPath = join(API_DOCS_PATH, "index.md");

  if (existsSync(readmePath)) {
    renameSync(readmePath, indexPath);
    console.log("📝 Renamed README.md to index.md");
  }

  console.log("🧹 Removing breadcrumbs from generated files...");
  removeBreadcrumbs(API_DOCS_PATH);

  const categories = [
    { dir: "classes", name: "Classes" },
    { dir: "interfaces", name: "Interfaces" },
    { dir: "type-aliases", name: "Type Aliases" },
  ];

  const items = [
    {
      text: "Overview",
      link: "/api/",
    },
  ];

  for (const category of categories) {
    const categoryItems = await generateCategoryItems(
      category.dir,
      category.name,
    );
    if (categoryItems && categoryItems.items.length > 0) {
      items.push(categoryItems);
    }
  }

  const sidebarConfig = {
    "/api/": [
      {
        text: "API Reference",
        items,
      },
    ],
  };

  const content = `// This file is auto-generated by scripts/generate-api-sidebar.mjs
// Run 'pnpm docs:api' to regenerate.

import type { DefaultTheme } from 'vitepress';

export const apiSidebar: DefaultTheme.SidebarMulti = ${JSON.stringify(
    sidebarConfig,
    null,
    2,
  ).replace(/"/g, "'")} as const;
`;

  writeFileSync(OUTPUT_PATH, content, "utf-8");

  console.log("✅ Generated API sidebar configuration");
  console.log(`📝 Output: ${OUTPUT_PATH}`);
  console.log(`📊 Total categories: ${items.length - 1}`); // -1 for Overview
  console.log(
    `📄 Total items: ${items.reduce((acc, item) => acc + (item.items?.length || 0), 0)}`,
  );
}

generateApiSidebar().catch((error) => {
  console.error("❌ Error generating API sidebar:", error);
  process.exit(1);
});
